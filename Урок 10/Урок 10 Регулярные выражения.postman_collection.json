{
	"info": {
		"_postman_id": "3754f37b-7792-4a15-9cd0-782ca3d8ed4d",
		"name": "Урок 10 Регулярные выражения",
		"description": "## **Коллекция ДЗ Урок 10.** Регулярные выражения\n\n#### Задание 47.\n\nСоставить регулярное выражение, проверяющее на валидность дату. Результат вывести в консоль.\n\n##### Примечание:\n\n- Високосный год не учитывается.\n- Вывод результата организован в трех вариантах: строка, объект и массив.\n    \n\n##### Запрос задания:\n\n- **GET ДЗ 47 Валидация дат при помощи регулярных выражений**\n    \n\n#### Задание 48.\n\n**HTTPBIN**, метод _**getUUID4**_. Отправить ресурсу **HTTPBIN** запрос, полученный ответ проверить на валидность с помощью регулярного выражения.\n\n##### Запрос задания:\n\n- **GET ДЗ 48 HTTPBIN getUUID4 проверка валидации UUID4 с помощью регулярного выражения**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23386398",
		"_collection_link": "https://lively-capsule-55441.postman.co/workspace/%25D0%2590%25D0%25B2%25D1%2582%25D0%25BE%25D0%25BC%25D0%25B0%25D1%2582%25D0%25B8%25D0%25B7%25D0%25B0%25D1%2586%25D0%25B8%25D1%258F-%25D1%2582%25D0%25B5%25D1%2581%25D1%2582%25D0%25BE%25D0%25B2-%25D0%25B4%25D0%25BB%25D1%258F-REST-A~f0af8592-a4dc-4fe3-aed5-135832153c62/collection/23386398-3754f37b-7792-4a15-9cd0-782ca3d8ed4d?action=share&source=collection_link&creator=23386398"
	},
	"item": [
		{
			"name": "ДЗ",
			"item": [
				{
					"name": "ДЗ 47 Валидация дат при помощи регулярных выражений",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* \r",
									"Регулярка на дату:\r",
									"Дни для 1-31\t\t(0[1-9]|[12][0-9]|3[0-1])\\.\t\tмесяцы 1, 3, 5, 7, 8, 10, 12\t\t(0[13578]|1[02])   Дни + месяц ->   (0[1-9]|[12][0-9]|3[0-1])\\.(0[13578]|1[02])\r",
									"Дни для 1-30\t\t(0[1-9]|[12][0-9]|30)\\.\t\t\tмесяцы 4, 6, 9, 11\t\t\t\t\t(0[469]|11)\t\t   Дни + месяц ->\t(0[1-9]|[12][0-9]|30)\\.(0[469]|11)\r",
									"Дни для 1-28\t\t(0[1-9]|1[0-9]|2[0-8])\\.\t\tмесяц 2\t\t\t\t\t\t\t\t(02)\t\t\t   Дни + месяц ->   (0[1-9]|1[0-9]|2[0-8])\\.(02)\r",
									"\r",
									"Год (с 1900 по 2199):\t(1[9]|2[01])([0-9][0-9])\r",
									"Високосный год не учитывается\r",
									"\r",
									"Дни, месяцы и год (от 1900 до 2199) вместе:\t(((0[1-9]|[12][0-9]|3[0-1])\\.(0[13578]|1[02]))|((0[1-9]|[12][0-9]|30)\\.(0[469]|11))|((0[1-9]|1[0-9]|2[0-8])\\.(02)))\\.((1[9]|2[01])([0-9][0-9]))\r",
									"*/\r",
									"let textWithDate = \"05.08.2005, 25, 30.02.1992, 99.13.5, 04.11.85, 32.03.1998, 31.06.2015, 01.01.2200, 18.04.2199, 24.08.1900, 16.12.1899, 12,12,2011, 15.07-2003\";\r",
									"\r",
									"//ВАРИАНТ 1. Собираем даты в объект - массив валидных и массив не валидных\r",
									"// Строку разбиваем сплитом на массив строк, далее в reduce собираем объект {'validDates': [массив], 'dontValidDates': [массив]}\r",
									"// начальное значение объекта - пустой ({'validDates': [], 'dontValidDates': []})\r",
									"// на каждой итерации, если элемент валидный, то в объект в ключ \"validDates\" добавляем текущий элемент, а ключ \"dontValidDates\" \r",
									"// оставляем без изменений: {'validDates': [...valid, element], 'dontValidDates': dontValid}\r",
									"// если иначе - то наоборот: {'validDates': valid, 'dontValidDates': [...dontValid, element]}\r",
									"// Окончательный объкт сохраняется в objDates\r",
									"// ВНИМАНИЕ ! в массивах методы push() не работают! только спред: [...valid, element] !\r",
									"let objDates = textWithDate.split(', ').reduce(({'validDates': valid, 'dontValidDates': dontValid}, element) => (element.match(/(((0[1-9]|[12][0-9]|3[0-1])\\.(0[13578]|1[02]))|((0[1-9]|[12][0-9]|30)\\.(0[469]|11))|((0[1-9]|1[0-9]|2[0-8])\\.(02)))\\.((1[9]|2[01])([0-9][0-9]))/) ? {'validDates': [...valid, element], 'dontValidDates': dontValid} : {'validDates': valid, 'dontValidDates': [...dontValid, element]}), {'validDates': [], 'dontValidDates': []});\r",
									"\r",
									"//ВАРИАНТ 2 Аналогичный, но собираем не в объект, а в массив двух массивов: [[валидные], [не валидные]]\r",
									"let [validDates, dontValidDates] = textWithDate.split(', ').reduce(([valid, dontValid], element) => (element.match(/(((0[1-9]|[12][0-9]|3[0-1])\\.(0[13578]|1[02]))|((0[1-9]|[12][0-9]|30)\\.(0[469]|11))|((0[1-9]|1[0-9]|2[0-8])\\.(02)))\\.((1[9]|2[01])([0-9][0-9]))/) ? [[...valid, element], dontValid] : [valid, [...dontValid, element]]), [[], []]);\r",
									"\r",
									"console.clear();\r",
									"console.log(`Валидные даты: ${objDates.validDates}, не валидные даты: ${objDates.dontValidDates}`);\r",
									"console.log(`Валидные даты: ${validDates}, не валидные даты: ${dontValidDates}`);\r",
									"console.log('====================================================================================');\r",
									"console.log(objDates);\r",
									"console.log([validDates, dontValidDates]);\r",
									"\r",
									"//ВАРИАНТ 3\r",
									"let isValid = element => element.match(/(((0[1-9]|[12][0-9]|3[0-1])\\.(0[13578]|1[02]))|((0[1-9]|[12][0-9]|30)\\.(0[469]|11))|((0[1-9]|1[0-9]|2[0-8])\\.(02)))\\.((1[9]|2[01])([0-9][0-9]))/);\r",
									"\r",
									"let arrDates = [validDates, dontValidDates] = [[], []];\r",
									"textWithDate.split(', ').filter(element => isValid(element) ? validDates.push(element) : dontValidDates.push(element));\r",
									"console.log('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');\r",
									"console.log(arrDates);\r",
									"\r",
									"//ВАРИАНТ 4 как видим, методы массивов работают только напрямую с массивами. Если надо рабоать с массивами в объектах, то надо использовать спреды. По аналогии организовывается и работа с методом reduce()\r",
									"let dateValid = [];\r",
									"let datedontValid = [];\r",
									"let objectDates = {\r",
									"                    \"validDates\":dateValid, \r",
									"                    \"dontValidDates\":datedontValid\r",
									"                  };\r",
									"\r",
									"textWithDate.split(', ').filter(element => isValid(element) ? dateValid.push(element) : datedontValid.push(element));\r",
									"console.log('---------------------------------------------------------------------------------------');\r",
									"console.log(objectDates);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://postman-echo.com/post",
							"protocol": "http",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "ДЗ 48 HTTPBIN getUUID4 проверка валидации UUID4 с помощью регулярного выражения",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(`Получен валидный UUID4 [ ${jsonData.uuid} ]`, function () {\r",
									"    pm.expect(jsonData.uuid).to.match(/([a-z0-9]{8})-([a-z0-9]{4})-4([a-z0-9]{3})-([a-z0-9]{4})-([a-z0-9]{12})/g);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://httpbin.org/uuid",
							"protocol": "http",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}